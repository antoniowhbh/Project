{"ast":null,"code":"import React,{useState,useEffect}from'react';import'./courses.css';import{useNavigate}from'react-router-dom';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function CourseSelection(){const navigate=useNavigate();const[courses,setCourses]=useState([]);const[selectedCourses,setSelectedCourses]=useState([]);const[isLoading,setIsLoading]=useState(false);const[error,setError]=useState(null);useEffect(()=>{setIsLoading(true);setError(null);const fetchCourses=async()=>{try{const response=await fetch('http://localhost:5000/api/courses');// Ensure this is the correct endpoint\nif(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}const data=await response.json();if(!Array.isArray(data)){throw new Error('Data format is incorrect, expected an array.');}setCourses(data);}catch(e){setError(\"Failed to fetch courses: \".concat(e.message));}finally{setIsLoading(false);}};fetchCourses();},[]);const handleCourseToggle=courseId=>{setSelectedCourses(prev=>{if(prev.includes(courseId)){return prev.filter(id=>id!==courseId);}else{return[...prev,courseId];}});};const handleSubmit=async()=>{try{const student_id=1;// This should be securely retrieved, possibly from a user session or context\nconst response=await fetch('http://localhost:5000/api/select-courses',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({student_id,selected_courses:selectedCourses})});const result=await response.json();if(!response.ok){throw new Error(result.error||'Error submitting courses');}console.log('Courses submitted:',result);navigate('/next-route');// Update this path to where you want users redirected after submission\n}catch(e){setError(\"Error during submission: \".concat(e.message));}};if(isLoading)return/*#__PURE__*/_jsx(\"div\",{children:\"Loading courses...\"});if(error)return/*#__PURE__*/_jsxs(\"div\",{children:[\"Error: \",error]});return/*#__PURE__*/_jsxs(\"div\",{className:\"hero-container\",children:[/*#__PURE__*/_jsx(\"video\",{src:\"/videos/sign-in.mp4\",autoPlay:true,loop:true,muted:true}),/*#__PURE__*/_jsx(\"h1\",{children:\"Select Your Courses\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"course-selection-container\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"courses-list\",children:courses.map(course=>/*#__PURE__*/_jsxs(\"div\",{className:\"course-item\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"checkbox\",id:\"course_\".concat(course.id),checked:selectedCourses.includes(course.id),onChange:()=>handleCourseToggle(course.id)}),/*#__PURE__*/_jsx(\"label\",{htmlFor:\"course_\".concat(course.id),children:course.name})]},course.id))}),/*#__PURE__*/_jsx(\"button\",{className:\"submit-button\",onClick:handleSubmit,children:\"Submit Courses\"})]})]});}export default CourseSelection;","map":{"version":3,"names":["React","useState","useEffect","useNavigate","jsx","_jsx","jsxs","_jsxs","CourseSelection","navigate","courses","setCourses","selectedCourses","setSelectedCourses","isLoading","setIsLoading","error","setError","fetchCourses","response","fetch","ok","Error","concat","status","data","json","Array","isArray","e","message","handleCourseToggle","courseId","prev","includes","filter","id","handleSubmit","student_id","method","headers","body","JSON","stringify","selected_courses","result","console","log","children","className","src","autoPlay","loop","muted","map","course","type","checked","onChange","htmlFor","name","onClick"],"sources":["/Users/antoniowehbe/PycharmProjects/pythonProject1/src/components/pages/courses/courses.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './courses.css';\nimport { useNavigate } from 'react-router-dom';\n\nfunction CourseSelection() {\n  const navigate = useNavigate();\n  const [courses, setCourses] = useState([]);\n  const [selectedCourses, setSelectedCourses] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    setIsLoading(true);\n    setError(null);\n    const fetchCourses = async () => {\n      try {\n        const response = await fetch('http://localhost:5000/api/courses');  // Ensure this is the correct endpoint\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        if (!Array.isArray(data)) {\n          throw new Error('Data format is incorrect, expected an array.');\n        }\n        setCourses(data);\n      } catch (e) {\n        setError(`Failed to fetch courses: ${e.message}`);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchCourses();\n  }, []);\n\n  const handleCourseToggle = (courseId) => {\n    setSelectedCourses(prev => {\n      if (prev.includes(courseId)) {\n        return prev.filter(id => id !== courseId);\n      } else {\n        return [...prev, courseId];\n      }\n    });\n  };\n\n  const handleSubmit = async () => {\n    try {\n      const student_id = 1;  // This should be securely retrieved, possibly from a user session or context\n      const response = await fetch('http://localhost:5000/api/select-courses', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ student_id, selected_courses: selectedCourses })\n      });\n      const result = await response.json();\n      if (!response.ok) {\n        throw new Error(result.error || 'Error submitting courses');\n      }\n      console.log('Courses submitted:', result);\n      navigate('/next-route'); // Update this path to where you want users redirected after submission\n    } catch (e) {\n      setError(`Error during submission: ${e.message}`);\n    }\n  };\n\n  if (isLoading) return <div>Loading courses...</div>;\n  if (error) return <div>Error: {error}</div>;\n\n  return (\n    <div className='hero-container'>\n      <video src='/videos/sign-in.mp4' autoPlay loop muted />\n      <h1>Select Your Courses</h1>\n      <div className='course-selection-container'>\n        <div className='courses-list'>\n          {courses.map(course => (\n            <div key={course.id} className='course-item'>\n              <input\n                type=\"checkbox\"\n                id={`course_${course.id}`}\n                checked={selectedCourses.includes(course.id)}\n                onChange={() => handleCourseToggle(course.id)}\n              />\n              <label htmlFor={`course_${course.id}`}>{course.name}</label>\n            </div>\n          ))}\n        </div>\n        <button className='submit-button' onClick={handleSubmit}>Submit Courses</button>\n      </div>\n    </div>\n  );\n}\n\nexport default CourseSelection;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}